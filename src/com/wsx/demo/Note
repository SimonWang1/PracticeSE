算法与数据结构基础：
算法：
二分查找：有序数组进行快速查找
大O表示法：排序运行时间，表示速率，最糟情况和平均情况
选择排序：按顺序比较每一个元素的大小，重新进行排列
数据结构：
数组：元素在一起，查询快，O(1)，添加O(n)
链表：储存下一个元素的地址，添加删除快，O(1)，查询O(n)
索引：表示元素的位置
队列：队头读取队尾插，先进先出，使用链表
链表数组：结合两者优点
递归：函数自己调用自己，都有基线条件和递归条件
栈内存：存储局部变量和对象的引用（堆内存地址），单线程私有内存，占用内存很小，固定生命周期，
使用递归JVM易抛出StackOverFlowError异常
调用栈：在栈顶进行压入（插入）和弹出（删除并读取）操作，输入先进后出，输出后进先出
堆内存：存储对象和全局变量，能被所有线程访问，占用内存大，使用GC机制回收，
内存溢出JVM抛出OutOfMemoryError异常
队列：先进先出，基于链表，在队头队尾进行操作，对应广度优先搜索
散列函数：将输入映射成数字，定位到散列表的数组索引，若索引存在元素，将键值对内容添加到该索引对应链表中
散列表：键值对形式，查找添加删除都很快，平均情况O(1)，基于数组，链表，散列函数实现，
Java中对应HashTable和重写的HashCode（对比数组索引相同）和equals（对比链表内容相同）方法

面向对象基础：
封装：使用private封装属性，提供公有的set，get方法供其他类调用，起到隐藏类属性的作用
继承/抽象：代码复用的重要手段，使用关键字extends/implements进行属性和方法的复用
多态：操作符多态，表示数字运算或字符串连接。类多态发生在已存在继承/抽象并重写方法的条件下，
父类引用指向子类对象，调用同一个方法，呈现不同的形态
final：修饰类不能被继承/实现，修饰方法不能被重写，修饰变量/引用表示只有一次赋值/指向机会
抽象类与接口的区别：
抽象类单继承，接口多实现
抽象类本身还是类，可以修饰成不同的访问权限、是否static、是否final，抽象类默认声明public static final
创建对象的执行顺序依次为（父类→子类）静态代码块，属性声明，普通初始化块，无参构造器，带参构造器

Collection Framework:
ArrayList: 基于可增长数组，查询快，添加删除慢，线程不安全
Vector: 与ArrayList基本相同，线程安全，效率低用的不多
LinkedList: 基于双向链表，间接实现了队列接口，查询慢，添加删除快，线程不安全
HashSet: 本质是散列表的键，不允许重复，添加没有顺序，线程不安全
HashMap: 散列表键值对形式，键唯一，查询添加删除速度快，线程不安全
HashTable: 与HashMap基本相同，不能存放null，线程安全

TreeSet: 
LinkedHashSet:
TreeMap: 
LinkedHashMap: 
